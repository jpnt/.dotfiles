#!/bin/sh
# jpstack: minimal post-install script with dialog interface for Void Linux
# TODO: replace runit -> s6 + s6-rc + 66?
# TODO: replace agetty + turnstile -> greetd
# TODO: replace NetworkManager -> dhcpcd, iwd, ifupdown-ng
# TODO: test mdevd compared to udevd
# TODO: wifi TUI: impala?
# TODO: bluetooth TUI: bluetui?

set -e

# Requirements
command -v dialog >/dev/null 2>&1 || { echo "dialog is required. Run: sudo xbps-install -y dialog"; exit 1; }

# Variables
TITLE="jpstack setup"
TMP_OUT=$(mktemp)
trap 'rm -f "$TMP_OUT"' EXIT # ensure temp file cleanup

USER_HOME=$(eval echo "~$USER")
JPSTACK_DIR="${USER_HOME}/Coding/jpstack"

REPOSITORIES="void-repo-nonfree void-repo-multilib void-repo-multilib-nonfree"

# Package Groups
CORE_DESKTOP_PKG="\
dragon fcft-devel gammastep foot xdg-user-dirs xdg-desktop-portal-wlr \
xdg-desktop-portal-gtk wlroots0.18-devel xorg-server-xwayland wlr-randr \
wdisplays wl-clipboard grim slurp seatd turnstile NetworkManager \
qt5-wayland qt6-wayland adwaita-qt adwaita-qt6 tofi trash-cli mako \
swaylock swaybg librewolf"
CORE_UTILS_PKG="\
neovim stow handlr bash-completion dtach socklog-void ripgrep fd fzf cronie ntpd-rs \
qalculate zstd keychain" 
FONTS_PKG="dejavu-fonts-ttf noto-fonts-ttf noto-fonts-cjk noto-fonts-emoji \
nerd-fonts-ttf"
MEDIA_PKG="\
imv pipewire alsa-pipewire alsa-utils ffmpeg zathura-pdf-mupdf ImageMagick \
cmus cmus-pulseaudio cmus-faad cmus-flac"
BLUETOOTH_PKG="bluez libspa-bluetooth"
VIRT_PKG="\
flatpak podman catatonit libvirt qemu virt-manager"
EXTRA_PKG="\
xtools smartmontools lm_sensors dmidecode xwininfo dnscrypt-proxy \
catgirl htop btop nvtop tlp tlp-rdw keepassxc syncthing glxinfo
git tig vis tealdeer ldns bind-utils socat uv strace jq gdu \
tcpdump psmisc procs man-pages-devel"
AMD_GPU_MESA="\
linux-firmware-amd mesa-dri vulkan-loader mesa-vulkan-radeon \
mesa-vaapi mesa-vdpau"
AMD_GPU_VLK="${AMD_GPU_MESA} amdvlk"
INTEL_GPU="\
linux-firmware-intel mesa-dri vulkan-loader mesa-vulkan-intel \
intel-video-accel"
NVIDIA_GPU_PKG="\
nvidia nvidia-libs-32bit libgcc-32bit libstdc++-32bit \
libdrm-32bit libglvnd-32bit"


GROUPS="_seatd wheel input video socklog libvirt"
DISABLE_SERVICES="dhcpcd wpa_supplicant agetty-tty4 agetty-tty5 agetty-tty6"
ENABLE_SERVICES="dbus NetworkManager cronie ntpd-rs seatd turnstiled nanoklogd socklog-unix libvirtd virtlockd virtlogd"

# Functions
confirm() {
    dialog --yesno "$1" 7 50
    return $?
}

info_box() {
    dialog --title "$TITLE" --infobox "$1" 5 50
    sleep 1
}

configure_dracut() {
    info_box "Configuring dracut..."
    sudo tee /etc/dracut.conf.d/99-jpstack.conf >/dev/null << EOF
hostonly=yes
EOF
}

configure_sysctl() {
    info_box "Configuring sysctl..."
    sudo tee /usr/lib/sysctl.d/99-jpstack.conf >/dev/null << EOF
vm.swappiness = 10
vm.max_map_count = 1048576
EOF
    sudo sysctl --system
}

make_clean_install() {
    info_box "Compiling $1..."
    cd "$1"
    make clean
    make -j$(nproc)
    sudo make install
    cd ..
}

install_packages() {
    info_box "Adding custom repositories..."
    echo "Superuser privileges are required. You might need to enter your sudo password."
    [ -f /etc/xbps.d/20-librewolf.conf ] || \
        echo 'repository=https://github.com/index-0/librewolf-void/releases/latest/download/' | \
        sudo tee /etc/xbps.d/20-librewolf.conf > /dev/null

    info_box "Updating system and installing repositories..."
    sudo xbps-install -Suy ${REPOSITORIES}

    dialog --checklist "Select optional package groups:" 20 60 10 \
        fonts "Install fonts" off \
        media "Media tools" off \
        bluetooth "Bluetooth stack" off \
        virtualization "VM/containers" off \
        extra "Extra tools" off 2>"$TMP_OUT"

    CHOICES=$(cat "$TMP_OUT")
    JPSTACK_PKGS="$CORE_DESKTOP_PKG $CORE_UTILS_PKG"

    echo "$CHOICES" | grep -q fonts && JPSTACK_PKGS="$JPSTACK_PKGS $FONTS_PKG"
    echo "$CHOICES" | grep -q media && JPSTACK_PKGS="$JPSTACK_PKGS $MEDIA_PKG"
    echo "$CHOICES" | grep -q bluetooth && JPSTACK_PKGS="$JPSTACK_PKGS $BLUETOOTH_PKG"
    echo "$CHOICES" | grep -q virtualization && JPSTACK_PKGS="$JPSTACK_PKGS $VIRT_PKG"
    echo "$CHOICES" | grep -q extra && JPSTACK_PKGS="$JPSTACK_PKGS $EXTRA_PKG"

    dialog --checklist "Select GPU drivers to install:" 15 60 6 \
        amd "AMD (Mesa-based)" off \
        amdvlk "AMD (with AMDVLK)" off \
        intel "Intel" off \
        nvidia "NVIDIA proprietary" off 2>"$TMP_OUT"

    GPU_CHOICE=$(cat "$TMP_OUT")

    echo "$GPU_CHOICE" | grep -q amdvlk && JPSTACK_PKGS="$JPSTACK_PKGS $AMD_GPU_VLK"
    echo "$GPU_CHOICE" | grep -q amd && JPSTACK_PKGS="$JPSTACK_PKGS $AMD_GPU_MESA"
    echo "$GPU_CHOICE" | grep -q intel && JPSTACK_PKGS="$JPSTACK_PKGS $INTEL_GPU"
    echo "$GPU_CHOICE" | grep -q nvidia && JPSTACK_PKGS="$JPSTACK_PKGS $NVIDIA_GPU_PKG"

    info_box "Installing selected packages..."
    sudo xbps-install -Sy $JPSTACK_PKGS

    info_box "Installing Flatpak apps..."
    flatpak remote-add --if-not-exists --user flathub https://dl.flathub.org/repo/flathub.flatpakrepo
    flatpak install --user --noninteractive --or-update flathub com.github.tchx84.Flatseal
    flatpak install --user --noninteractive --or-update flathub com.saivert.pwvucontrol
}

post_install() {
    info_box "Creating XDG directories..."
    xdg-user-dirs-update

    info_box "Adding user to groups..."
    for group in ${GROUPS}; do
        sudo usermod -aG ${group} ${USER}
    done

    info_box "Disabling services..."
    for service in ${DISABLE_SERVICES}; do
        [ -h "/var/service/${service}" ] && \
            sudo sv stop "${service}" && \
            sudo unlink "/var/service/${service}"
    done

    info_box "Enabling services..."
    for service in ${ENABLE_SERVICES}; do
        [ ! -d "/var/service/${service}" ] && \
            sudo ln -s "/etc/sv/${service}" "/var/service/${service}" && \
            sudo sv start "${service}"
    done

    info_box "Compiling custom packages..."
    mkdir -p "$JPSTACK_DIR"
    cd "$JPSTACK_DIR"

    [ ! -d "sfm" ] && git clone "https://github.com/jpnt/sfm"
    make_clean_install sfm

    [ ! -d "slstatus" ] && git clone "https://github.com/jpnt/slstatus"
    make_clean_install slstatus

    [ ! -d "dwl" ] && git clone "https://github.com/jpnt/dwl"
    make_clean_install dwl

    configure_dracut
    configure_sysctl

    dialog --title "$TITLE" --msgbox "jpstack installation complete." 7 50
    rm -f "$TMP_OUT"
    clear
}

main() {
    dialog --title "$TITLE" --yesno "Start jpstack system setup now?" 7 50
    [ $? -eq 0 ] || { echo "Aborted."; exit 1; }

    install_packages
    post_install
}

main

