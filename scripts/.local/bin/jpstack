#!/bin/sh
# jpstack â€“ collection of software I run on Void Linux
# POSIX sh - suckless and portable

set -eu
IFS=' 	
'

###############################################################################
# Error handling & cleanup                                                    #
###############################################################################
TMP_OUT=$(mktemp)
LOG_FILE=${LOG_FILE:-"/tmp/jpstack.$(date +%s).log"}

trap 'rm -f "$TMP_OUT"' EXIT

log() {
    printf "[jpstack] %s\n" "$*" | tee -a "$LOG_FILE"
}

log_cmd() {
    log "+ $*"
    "$@" 2>&1 | tee -a "$LOG_FILE"
}

###############################################################################
# Constants                                                                   #
###############################################################################
TITLE="jpstack setup"
JPSTACK_DIR="$HOME/Coding/jpstack"

# Required commands
REQUIRED_CMDS="dialog xbps-install sudo"

###############################################################################
# Helper functions                                                            #
###############################################################################
require_cmd() {
    if ! command -v "$1" >/dev/null 2>&1; then
        log "Missing required command: $1"
        exit 1
    fi
}

info_box() {
    dialog --title "$TITLE" --infobox "$1" 5 60
}

make_clean_install() {
    repo="$1"
    info_box "Compiling $repo..."
    cd "$repo"
    log_cmd make clean
    log_cmd make -j"$(nproc)"
    log_cmd sudo make install
    cd ..
}

install_librewolf_repo() {
    info_box "Installing Librewolf repository..."
    sudo install -Dm644 /dev/stdin /etc/xbps.d/20-librewolf.conf <<'EOF'
repository=https://github.com/index-0/librewolf-void/releases/latest/download/
EOF
}

install_ungoogled_chromium_repo() {
    info_box "Installing Ungoogled Chromium repository..."
    sudo install -Dm644 /dev/stdin /etc/xbps.d/20-ungoogled-chromium.conf <<'EOF'
repository=https://github.com/DAINRA/ungoogled-chromium-void/releases/latest/download/
EOF
}

service_enable() {
    svc="$1"
    info_box "Enabling service: $svc..."
    
    # Detect running init system
    if pgrep runit >/dev/null 2>&1; then
        if [ ! -e "/var/service/$svc" ]; then
            sudo ln -s "/etc/sv/$svc" "/var/service/$svc"
            sudo sv start "$svc"
        fi
    elif pgrep dinit >/dev/null 2>&1; then
        sudo dinitctl enable "$svc"
        sudo dinitctl start "$svc"
    else
        log "Unknown init system, cannot enable $svc"
    fi
}

service_disable() {
    svc="$1"
    info_box "Disabling service: $svc..."
    
    # Detect running init system
    if pgrep runit >/dev/null 2>&1; then
        if [ -h "/var/service/$svc" ]; then
            sudo sv stop "$svc"
            sudo unlink "/var/service/$svc"
        fi
    elif pgrep dinit >/dev/null 2>&1; then
        sudo dinitctl stop "$svc" 2>/dev/null || true
        sudo dinitctl disable "$svc" 2>/dev/null || true
    else
        log "Unknown init system, cannot disable $svc"
    fi
}

###############################################################################
# Package installation                                                        #
###############################################################################
install_packages() {
    info_box "Adding custom repositories..."
    install_librewolf_repo
    install_ungoogled_chromium_repo

    info_box "Syncing XBPS repositories..."
    log_cmd sudo xbps-install -Suy void-repo-nonfree void-repo-multilib void-repo-multilib-nonfree

    # Core packages - always installed
    CORE_PKGS="dragon fcft-devel foot xdg-user-dirs xdg-desktop-portal-wlr \
    xdg-desktop-portal-gtk wlroots0.19-devel xorg-server-xwayland wlr-randr \
    wdisplays wl-clipboard grim slurp seatd turnstile keyd dhcpcd \
    qt5-wayland qt6-wayland adwaita-qt adwaita-qt6 tofi trash-cli mako \
    waylock swaybg swayidle kanshi gammastep neovim handlr scdoc \
    abduco socklog-void ripgrep fd fzf cronie eza ntpd-rs qalculate \
    btrfs-progs snazzer zstd keychain make inotify-tools"

    PKGS="$CORE_PKGS"

    # Optional package groups
    dialog --checklist "Select optional package groups:" 20 60 10 \
        fonts "Install fonts" off \
        media "Media tools" off \
        wifi "Wireless networking" off \
        bluetooth "Bluetooth stack" off \
        virt "VM/containers" off \
        flatpak "Flatpak" off \
        extra "Extra tools" off 2>"$TMP_OUT"

    while read -r choice; do
        case "$choice" in
            fonts)
                PKGS="$PKGS dejavu-fonts-ttf noto-fonts-ttf noto-fonts-cjk noto-fonts-emoji nerd-fonts-ttf"
                ;;
            media)
                PKGS="$PKGS mpv imv pipewire alsa-pipewire alsa-utils ffmpeg zathura-pdf-mupdf ImageMagick cmus cmus-pulseaudio cmus-faad cmus-flac"
                ;;
            wifi)
                PKGS="$PKGS iwd impala"
                ;;
            bluetooth)
                PKGS="$PKGS bluez libspa-bluetooth bluetui"
                ;;
            virt)
                PKGS="$PKGS podman catatonit libvirt qemu virt-manager"
                ;;
            flatpak)
                PKGS="$PKGS flatpak"
                ;;
            extra)
                PKGS="$PKGS xtools smartmontools lm_sensors dmidecode xwininfo catgirl htop btop nvtop bandwhich tlp keepassxc syncthing glxinfo git tig vis tealdeer ldns socat uv jq dua-cli xh tcpdump psmisc procs man-pages-devel cpufrequtils"
                ;;
        esac
    done < "$TMP_OUT"

    # GPU drivers
    dialog --checklist "Select GPU drivers:" 15 60 4 \
        amd "AMD (Mesa)" off \
        intel "Intel" off \
        nvidia "NVIDIA proprietary" off 2>"$TMP_OUT"

    while read -r gpu; do
        case "$gpu" in
            amd)
                PKGS="$PKGS linux-firmware-amd mesa-dri vulkan-loader mesa-vulkan-radeon mesa-vaapi mesa-vdpau"
                ;;
            intel)
                PKGS="$PKGS linux-firmware-intel mesa-dri vulkan-loader mesa-vulkan-intel intel-video-accel"
                ;;
            nvidia)
                PKGS="$PKGS nvidia nvidia-container-toolkit"
                ;;
        esac
    done < "$TMP_OUT"

    # Show package list
    printf "%s\n" $PKGS > "$TMP_OUT"
    dialog --title "$TITLE" --textbox "$TMP_OUT" 20 60

    info_box "Installing selected packages..."
    log_cmd sudo xbps-install -Sy $PKGS

    # Install flatpak apps if flatpak was selected
    if command -v flatpak >/dev/null 2>&1; then
        info_box "Installing flatpak apps..."
        log_cmd flatpak remote-add --if-not-exists --user flathub https://dl.flathub.org/repo/flathub.flatpakrepo
        log_cmd flatpak install --user --noninteractive flathub com.github.tchx84.Flatseal com.saivert.pwvucontrol
    fi

    # TODO
    # Install zig-0.14
    # Install river
    # Install creek

    # Build personal suckless tools
    # mkdir -p "$JPSTACK_DIR"
    # cd "$JPSTACK_DIR"
    #
    # for repo in sfm slstatus; do
    #     if [ -d "$repo" ]; then
    #         log "$repo already cloned."
    #     else
    #         log_cmd git clone "https://github.com/jpnt/$repo"
    #     fi
    #     make_clean_install "$repo"
    # done
    #
    # cd "$HOME"
}

###############################################################################
# System configuration                                                        #
###############################################################################
configure_btrfs() {
	# TODO
	# really important. if this fails the whole system fails as well!
	# use snazzer tool for backups
	# btrfs-progs has a lot of useful utilities
}

configure_dracut() {
    info_box "Configuring dracut..."
    sudo install -Dm644 /dev/stdin /etc/dracut.conf.d/99-jpstack.conf <<'EOF'
hostonly=yes
EOF
}

configure_sysctl() {
    info_box "Configuring sysctl..."
    sudo install -Dm644 /dev/stdin /etc/sysctl.d/99-jpstack.conf <<'EOF'
vm.swappiness = 10
EOF
    log_cmd sudo sysctl --system
}

configure_iwd() {
    info_box "Configuring iwd..."
    sudo install -Dm644 /dev/stdin /etc/iwd/main.conf <<'EOF'
[General]
EnableNetworkConfiguration=true
EOF
}

configure_keyd() {
    info_box "Configuring keyd..."
    sudo install -Dm644 /dev/stdin /etc/keyd/default.conf <<'EOF'
[ids]
*

[main]
capslock = esc
esc = capslock
EOF
}

configure_system() {
    dialog --checklist "Select configuration steps:" 20 60 10 \
        btrfs "Configure Btrfs subvolumes + fstab + snapshots" off \
        dracut "Configure dracut (hostonly)" on \
        sysctl "Configure sysctl (vm.swappiness = 10)" on \
        iwd "Enable iwd native DHCP" on \
        keyd "Map ESC/CapsLock with keyd" off 2>"$TMP_OUT"

    while read -r step; do
        case "$step" in
            btrfs) configure_btrfs ;;
            dracut) configure_dracut ;;
            sysctl) configure_sysctl ;;
            iwd) configure_iwd ;;
            keyd) configure_keyd ;;
        esac
    done < "$TMP_OUT"
}

###############################################################################
# Post-install                                                                #
###############################################################################
post_install() {
    info_box "Creating XDG user dirs..."
    xdg-user-dirs-update

    info_box "Adding user to groups..."
    for grp in _seatd wheel input video socklog libvirt; do
        sudo usermod -aG "$grp" "$(whoami)"
    done

    info_box "Configuring services..."
    for svc in dhcpcd wpa_supplicant agetty-tty5 agetty-tty6; do
        service_disable "$svc"
    done
    
    for svc in keyd dbus cronie ntpd-rs seatd turnstiled nanoklogd socklog-unix libvirtd virtlockd virtlogd; do
        service_enable "$svc"
    done

    log_cmd sudo update-grub
    log_cmd sudo vkpurge rm all
}

###############################################################################
# Main                                                                        #
###############################################################################
main() {
    for cmd in $REQUIRED_CMDS; do
        require_cmd "$cmd"
    done
    
    if ! dialog --title "$TITLE" --yesno "Start jpstack system setup?" 7 50; then
        log "Aborted by user."
        exit 0
    fi
    
    log "jpstack started at $(date)"

    install_packages
    configure_system
    post_install

    dialog --title "$TITLE" --msgbox "jpstack installation complete." 7 50
    log "jpstack completed successfully at $(date)"
}

main "$@"
