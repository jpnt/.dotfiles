# #!/usr/bin/env bash
# jpstack – Void Linux application layer stack setup script
# very opinionated, intended to work the way I like to use Linux

# TODOS for summer:
# TODO(general): identify and remove main points of bloat in the system.
# TODO(general): indentify errors in the system and increase robustness.
# TODO: configure_fstrim function
# TODO: mimetype robust configuration for applications that I use. Everything must be expected and statically configured
#       https://docs.windswept.digital/nixos/mimetypes something like this would be amazing
# TODO: test mksh
# TODO: test: sway: see if it is more reliable than current (dwl) https://github.com/julmajustus/dwl-deep-dive
# TODO: create my own wayland compositor? use Louvre library
# TODO: test: xdg-desktop-portal some times fails: use services?
# TODO: test: HDMI port not working
# TODO: more granular logging, output what is being done: more transparency
# TODO: Linux Kernel Manager: kman
# TODO: test DNS: dnscrypt-proxy vs unbound vs s6-networking + s6-dns: latency
# TODO: GUI file manager that integrates with other tools: crabcmd
# TODO: ifupdown-ng: doesnt use iwd, also I want to use builtin iwd dhcp client. patch upstream
# TODO: "post-install" make it so that this script works just after install. bootstrapping my dotfiles, etc...
# TODO: mako service is always polling files. replace it (*) or patch upstream
# * options:
#     - https://github.com/Toqozz/wired-notify
#     - https://blog.orhun.dev/introducing-runst/
#     - https://codeberg.org/dnkl/fnott
# TODO: replace agetty + turnstile -> greetd
# TODO: replace runit -> s6 + s6-rc (+ 66?/ s6-frontend). I like runit's approach to services being "just a shell script"
# TODO: test wlsunset and wl-gammactl-rs -> replace gammastep?
# TODO: test mdevd -> compare to udevd
# TODO: test ouch -> compress/decompress tool
# TODO: test xh -> similar to httpie and alternative to curl
# TODO: test oryx vs bandwhich -> use both?
# TODO: test https://github.com/Chleba/netscanner
# TODO: test https://github.com/e-tho/iwmenu
# TODO: test nftables
# TODO: test MAC spoofing
# TODO: test integrity check in Void Linux, restic, aide, borg
# TODO: test fuseoverlay-fs
# TODO: test readonly root

set -Eeuo pipefail
IFS=$'\n\t'
shopt -s failglob

###############################################################################
# Error handling & cleanup                                                    #
###############################################################################
TMP_OUT=$(mktemp)
LOG_FILE=${LOG_FILE:-"/tmp/jpstack.$(date +%s).log"}

cleanup() {
    rm -f "$TMP_OUT"
}
trap cleanup EXIT

error_trap() {
    local line=$1 rc=$2
    echo "[jpstack] ERROR line $line – exit $rc" | tee -a "$LOG_FILE" >&2
    exit "$rc"
}
trap 'error_trap $LINENO $?' ERR

###############################################################################
# Constants                                                                   #
###############################################################################
TITLE="jpstack setup"
REPOSITORIES=(void-repo-nonfree void-repo-multilib void-repo-multilib-nonfree)

# Package groups (arrays)
CORE_DESKTOP=(\
  dragon fcft-devel foot xdg-user-dirs xdg-desktop-portal-wlr \
  xdg-desktop-portal-gtk wlroots0.18-devel xorg-server-xwayland wlr-randr \
  wdisplays wl-clipboard grim slurp seatd turnstile keyd dhcpcd ifupdown-ng \
  qt5-wayland qt6-wayland adwaita-qt adwaita-qt6 tofi trash-cli mako \
  swaylock swaybg librewolf)

CORE_UTILS=(\
  neovim stow handlr bash-completion dtach socklog-void ripgrep fd fzf \
  cronie eza ntpd-rs qalculate zstd keychain bandwhich gammastep)

EXTRA=(\
  xtools smartmontools lm_sensors dmidecode xwininfo dnscrypt-proxy \
  catgirl htop btop nvtop tlp tlp-rdw keepassxc syncthing glxinfo \
  git tig vis tealdeer ldns socat uv strace jq dua-cli \
  tcpdump psmisc procs man-pages-devel cpufrequtils)

FONTS=(dejavu-fonts-ttf noto-fonts-ttf noto-fonts-cjk noto-fonts-emoji nerd-fonts-ttf)

MEDIA=(imv pipewire alsa-pipewire alsa-utils ffmpeg zathura-pdf-mupdf ImageMagick \
        cmus cmus-pulseaudio cmus-faad cmus-flac)

WIFI=(iwd impala)

BLUETOOTH=(bluez libspa-bluetooth bluetui)

VIRT=(flatpak podman catatonit libvirt qemu virt-manager)

AMD_GPU_MESA=(linux-firmware-amd mesa-dri vulkan-loader mesa-vulkan-radeon mesa-vaapi mesa-vdpau)
AMD_GPU_VLK=("${AMD_GPU_MESA[@]}" amdvlk)
INTEL_GPU=(linux-firmware-intel mesa-dri vulkan-loader mesa-vulkan-intel intel-video-accel)
NVIDIA_GPU=(nvidia nvidia-libs-32bit libgcc-32bit libstdc++-32bit libdrm-32bit libglvnd-32bit)

GROUPS=(seatd wheel input video socklog libvirt)
DISABLE_SERVICES=(dhcpcd wpa_supplicant agetty-tty4 agetty-tty5 agetty-tty6)
ENABLE_SERVICES=(keyd dbus cronie ntpd-rs seatd turnstiled nanoklogd socklog-unix libvirtd virtlockd virtlogd)

# Required commands
REQUIRED_CMDS=(dialog xbps-install git make sudo)


###############################################################################
# Helper functions                                                            #
###############################################################################
require_cmd() {
    command -v "$1" &>/dev/null || { echo "[jpstack] '$1' missing; abort." >&2; exit 1; }
}

join_by_space() { # prints array elements separated by spaces
    local IFS=' '
    echo "$*"
}

info_box() {
    dialog --title "$TITLE" --infobox "$1" 5 60 && sleep 0.8
}

make_clean_install() {
    local repo=$1
    info_box "Compiling $repo..."
    pushd "$repo" >/dev/null
    make clean
    make -j"$(getconf _NPROCESSORS_ONLN)"
    sudo make install
    popd >/dev/null
}

# TODO: if s6 stuff doesnt exist then use runit. make this generic
link_sv() {
    local action=$1 svc=$2
    local dst="/var/service/$svc" src="/etc/sv/$svc"
    case $action in
        enable)
            info_box "Enabling service: $svc..."
            [[ -e $dst ]] || { sudo ln -s "$src" "$dst"; sudo sv start "$svc"; } ;;
        disable)
            info_box "Disabling service: $svc..."
            if [[ -h $dst ]]; then
                sudo sv stop "$svc"
                sudo unlink "$dst"
            fi
            ;;
    esac
}

###############################################################################
# System configuration snippets                                               #
###############################################################################
configure_dracut() {
    info_box "Configuring dracut..."
    sudo install -Dm644 /dev/stdin /etc/dracut.conf.d/99-jpstack.conf <<'EOF'
hostonly=yes
EOF
}

configure_sysctl() {
    info_box "Configuring sysctl..."
    sudo install -Dm644 /dev/stdin /etc/sysctl.d/99-jpstack.conf <<'EOF'
vm.swappiness = 10
EOF
    sudo sysctl --system
}

configure_iwd_dhcp() {
    info_box "Configuring iwd..."
    sudo install -Dm644 /dev/stdin /etc/iwd/main.conf <<'EOF'
[General]
EnableNetworkConfiguration=true
EOF
}

configure_keyd() {
    info_box "Configuring keyd..."
    sudo install -Dm644 /dev/stdin /etc/keyd/default.conf <<'EOF'
[ids]
*

[main]
capslock = esc
esc = capslock
EOF
}


###############################################################################
# Install‑phase                                                               #
###############################################################################
install_packages() {
    info_box "Adding custom repositories..."
    [[ -f /etc/xbps.d/20-librewolf.conf ]] || \
        echo 'repository=https://github.com/index-0/librewolf-void/releases/latest/download/' | \
        sudo tee /etc/xbps.d/20-librewolf.conf >/dev/null

    info_box "Syncing XBPS repositories..."
    sudo xbps-install -Suy "${REPOSITORIES[@]}"

    # ----- Optional package groups (dialog) -----
    dialog --checklist "Select optional package groups:" 20 60 10 \
        fonts "Install fonts" off \
        media "Media tools" off \
        wifi "Wireless networking" off \
        bluetooth "Bluetooth stack" off \
        virtualization "VM/containers" off \
        extra "Extra tools" off 2>"$TMP_OUT"
    mapfile -t CHOICES <"$TMP_OUT"

    declare -a PKGS=("${CORE_DESKTOP[@]}" "${CORE_UTILS[@]}")

    for choice in "${CHOICES[@]}"; do
        case $choice in
            fonts)          PKGS+=("${FONTS[@]}") ;;
            media)          PKGS+=("${MEDIA[@]}") ;;
            wifi)           PKGS+=("${WIFI[@]}") ;;
            bluetooth)      PKGS+=("${BLUETOOTH[@]}") ;;
            virtualization) PKGS+=("${VIRT[@]}") ;;
            extra)          PKGS+=("${EXTRA[@]}") ;;
        esac
    done

    # ----- GPU drivers -----
    dialog --checklist "Select GPU drivers to install:" 15 60 6 \
        amd "AMD (Mesa)" off \
        amdvlk "AMD (Mesa + AMDVLK)" off \
        intel "Intel" off \
        nvidia "NVIDIA proprietary" off 2>"$TMP_OUT"
    mapfile -t GPU_CHOICE <"$TMP_OUT"

    for gpu in "${GPU_CHOICE[@]}"; do
        case $gpu in
            amd)     PKGS+=("${AMD_GPU_MESA[@]}") ;;
            amdvlk)  PKGS+=("${AMD_GPU_VLK[@]}") ;;
            intel)   PKGS+=("${INTEL_GPU[@]}") ;;
            nvidia)  PKGS+=("${NVIDIA_GPU[@]}") ;;
        esac
    done

    info_box "Installing selected packages... (this may take a while)"
    sudo xbps-install -Sy "${PKGS[@]}"

    # Flatpak extras
    if command -v flatpak &>/dev/null; then
        info_box "Installing Flatpak apps..."
        flatpak remote-add --if-not-exists --user flathub https://dl.flathub.org/repo/flathub.flatpakrepo
        flatpak install --user --noninteractive --or-update flathub \
            com.github.tchx84.Flatseal com.saivert.pwvucontrol
    fi
}

###############################################################################
# Post‑install phase                                                          #
###############################################################################
post_install() {
    info_box "Creating XDG user dirs..."
    xdg-user-dirs-update

    info_box "Adding user $(whoami) to groups..."
    for grp in "${GROUPS[@]}"; do
        sudo usermod -aG "$grp" "$(whoami)"
    done

    info_box "Toggling services..."
    for svc in "${DISABLE_SERVICES[@]}";   do link_sv disable "$svc"; done
    for svc in "${ENABLE_SERVICES[@]}";    do link_sv enable  "$svc";  done

    # --- Build personal suckless tools ---
    local CODING_DIR="$HOME/Coding/jpstack"
    mkdir -p "$CODING_DIR" && pushd "$CODING_DIR" >/dev/null

    for repo in sfm slstatus dwl; do
        [[ -d $repo ]] || git clone "https://github.com/jpnt/$repo"
        make_clean_install "$repo"
    done

    popd >/dev/null

    # --- System configs ---
    configure_dracut
    configure_sysctl
    configure_iwd_dhcp
    configure_keyd

    dialog --title "$TITLE" --msgbox "jpstack installation complete." 7 50
}

###############################################################################
# Main                                                                        #
###############################################################################
main() {
    for cmd in "${REQUIRED_CMDS[@]}"; do require_cmd "$cmd"; done

    dialog --title "$TITLE" --yesno "Start jpstack system setup now?" 7 50 || { echo "[jpstack] aborted."; exit 0; }
    install_packages
    post_install
}

main "$@"
